[{"name":"Iso8601","comment":" Convert between ISO-8601 date strings and POSIX times.\n\n@docs fromTime, toTime, decoder, encode\n\n","unions":[],"aliases":[],"values":[{"name":"decoder","comment":" Decode an ISO-8601 date string to a `Time.Posix` value using [`toTime`](#toTime).\n","type":"Json.Decode.Decoder Time.Posix"},{"name":"encode","comment":" Encode a `Time.Posix` value as an ISO-8601 date string using\n[`fromTime`](#fromTime).\n","type":"Time.Posix -> Json.Encode.Value"},{"name":"fromTime","comment":" Inflate a Posix integer into a more memory-intensive ISO-8601 date string.\n\nIt's generally best to avoid doing this unless an external API requires it.\n\n(UTC integers are less error-prone, take up less memory, and are more efficient\nfor time arithmetic.)\n\nFormat: YYYY-MM-DDTHH:mm:ss.SSSZ\n\n","type":"Time.Posix -> String.String"},{"name":"toTime","comment":" Convert from an ISO-8601 date string to a `Time.Posix` value.\n\nISO-8601 date strings sometimes specify things in UTC. Other times, they specify\na non-UTC time as well as a UTC offset. Regardless of which format the ISO-8601\nstring uses, this function normalizes it and returns a time in UTC.\n\n","type":"String.String -> Result.Result (List.List Parser.DeadEnd) Time.Posix"}],"binops":[]}]