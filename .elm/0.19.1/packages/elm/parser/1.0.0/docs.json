[{"name":"Parser","comment":"\n\n# Parsers\n@docs Parser, run\n\n# Building Blocks\n@docs int, float, number, symbol, keyword, variable, end\n\n# Pipelines\n@docs succeed, (|=), (|.), lazy, andThen, problem\n\n# Branches\n@docs oneOf, map, backtrackable, commit, token\n\n# Loops\n@docs sequence, Trailing, loop, Step\n\n# Whitespace\n@docs spaces, lineComment, multiComment, Nestable\n\n# Chompers\n@docs getChompedString, chompIf, chompWhile, chompUntil, chompUntilEndOr, mapChompedString\n\n# Errors\n@docs DeadEnd, Problem, deadEndsToString\n\n# Indentation\n@docs withIndent, getIndent\n\n# Positions\n@docs getPosition, getRow, getCol, getOffset, getSource\n","unions":[{"name":"Nestable","comment":" Not all languages handle multi-line comments the same. Multi-line comments\nin C-style syntax are `NotNestable`, meaning they can be implemented like this:\n\n    js : Parser ()\n    js =\n      symbol \"/*\"\n        |. chompUntil \"*/\"\n\nIn fact, `multiComment \"/*\" \"*/\" NotNestable` *is* implemented like that! It is\nvery simple, but it does not allow you to nest comments like this:\n\n```javascript\n/*\nline1\n/* line2 */\nline3\n*/\n```\n\nIt would stop on the first `*/`, eventually throwing a syntax error on the\nsecond `*/`. This can be pretty annoying in long files.\n\nLanguages like Elm allow you to nest multi-line comments, but your parser needs\nto be a bit fancier to handle this. After you start a comment, you have to\ndetect if there is another one inside it! And then you have to make sure all\nthe `{-` and `-}` match up properly! Saying `multiComment \"{-\" \"-}\" Nestable`\ndoes all that for you.\n","args":[],"cases":[["NotNestable",[]],["Nestable",[]]]},{"name":"Problem","comment":" When you run into a `DeadEnd`, I record some information about why you\ngot stuck. This data is useful for producing helpful error messages. This is\nhow [`deadEndsToString`](#deadEndsToString) works!\n\n**Note:** If you feel limited by this type (i.e. having to represent custom\nproblems as strings) I highly recommend switching to `Parser.Advanced`. It\nlets you define your own `Problem` type. It can also track \"context\" which\ncan improve error messages a ton! This is how the Elm compiler produces\nrelatively nice parse errors, and I am excited to see those techniques applied\nelsewhere!\n","args":[],"cases":[["Expecting",["String.String"]],["ExpectingInt",[]],["ExpectingHex",[]],["ExpectingOctal",[]],["ExpectingBinary",[]],["ExpectingFloat",[]],["ExpectingNumber",[]],["ExpectingVariable",[]],["ExpectingSymbol",["String.String"]],["ExpectingKeyword",["String.String"]],["ExpectingEnd",[]],["UnexpectedChar",[]],["Problem",["String.String"]],["BadRepeat",[]]]},{"name":"Step","comment":" Decide what steps to take next in your [`loop`](#loop).\n\nIf you are `Done`, you give the result of the whole `loop`. If you decide to\n`Loop` around again, you give a new state to work from. Maybe you need to add\nan item to a list? Or maybe you need to track some information about what you\njust saw?\n\n**Note:** It may be helpful to learn about [finite-state machines][fsm] to get\na broader intuition about using `state`. I.e. You may want to create a `type`\nthat describes four possible states, and then use `Loop` to transition between\nthem as you consume characters.\n\n[fsm]: https://en.wikipedia.org/wiki/Finite-state_machine\n","args":["state","a"],"cases":[["Loop",["state"]],["Done",["a"]]]},{"name":"Trailing","comment":" Whatâ€™s the deal with trailing commas? Are they `Forbidden`?\nAre they `Optional`? Are they `Mandatory`? Welcome to [shapes\nclub](https://poorlydrawnlines.com/comic/shapes-club/)!\n","args":[],"cases":[["Forbidden",[]],["Optional",[]],["Mandatory",[]]]}],"aliases":[{"name":"DeadEnd","comment":" A parser can run into situations where there is no way to make progress.\nWhen that happens, I record the `row` and `col` where you got stuck and the\nparticular `problem` you ran into. That is a `DeadEnd`!\n\n**Note:** I count rows and columns like a text editor. The beginning is `row=1`\nand `col=1`. As I chomp characters, the `col` increments. When I reach a `\\n`\ncharacter, I increment the `row` and set `col=1`.\n","args":[],"type":"{ row : Basics.Int, col : Basics.Int, problem : Parser.Problem }"},{"name":"Parser","comment":" A `Parser` helps turn a `String` into nicely structured data. For example,\nwe can [`run`](#run) the [`int`](#int) parser to turn `String` to `Int`:\n\n    run int \"123456\" == Ok 123456\n    run int \"3.1415\" == Err ...\n\nThe cool thing is that you can combine `Parser` values to handle much more\ncomplex scenarios.\n","args":["a"],"type":"Parser.Advanced.Parser Basics.Never Parser.Problem a"}],"values":[{"name":"andThen","comment":" Parse one thing `andThen` parse another thing. This is useful when you want\nto check on what you just parsed. For example, maybe you want U.S. zip codes\nand `int` is not suitable because it does not allow leading zeros. You could\nsay:\n\n    zipCode : Parser String\n    zipCode =\n      getChompedString (chompWhile Char.isDigit)\n        |> andThen checkZipCode\n\n    checkZipCode : String -> Parser String\n    checkZipCode code =\n      if String.length code == 5 then\n        succeed code\n      else\n        problem \"a U.S. zip code has exactly 5 digits\"\n\nFirst we chomp digits `andThen` we check if it is a valid U.S. zip code. We\n`succeed` if it has exactly five digits and report a `problem` if not.\n\nCheck out [`examples/String.elm`](TODO) for another example that uses `andThen`\nto verify unicode code points.\n\n**Note:** If you are using `andThen` recursively and blowing the stack, check\nout the [`loop`](#loop) function to limit stack usage.\n","type":"(a -> Parser.Parser b) -> Parser.Parser a -> Parser.Parser b"},{"name":"backtrackable","comment":" It is quite tricky to use `backtrackable` well! It can be very useful, but\nalso can degrade performance and error message quality.\n\nRead [this document](TODO) to learn how `oneOf`, `backtrackable`, and `commit`\nwork and interact with each other. It is subtle and important!\n","type":"Parser.Parser a -> Parser.Parser a"},{"name":"chompIf","comment":" Chomp one character if it passes the test.\n\n    chompUpper : Parser ()\n    chompUpper =\n      chompIf Char.isUpper\n\nSo this can chomp a character like `T` and produces a `()` value.\n","type":"(Char.Char -> Basics.Bool) -> Parser.Parser ()"},{"name":"chompUntil","comment":" Chomp until you see a certain string. You could define C-style multi-line\ncomments like this:\n\n    comment : Parser ()\n    comment =\n      symbol \"/*\"\n        |. chompUntil \"*/\"\n\nI recommend using [`multiComment`](#multiComment) for this particular scenario\nthough. It can be trickier than it looks!\n","type":"String.String -> Parser.Parser ()"},{"name":"chompUntilEndOr","comment":" Chomp until you see a certain string or until you run out of characters to\nchomp! You could define single-line comments like this:\n\n    elm : Parser ()\n    elm =\n      symbol \"--\"\n        |. chompUntilEndOr \"\\n\"\n\nA file may end with a single-line comment, so the file can end before you see\na newline. Tricky!\n\nI recommend just using [`lineComment`](#lineComment) for this particular\nscenario.\n","type":"String.String -> Parser.Parser ()"},{"name":"chompWhile","comment":" Chomp zero or more characters if they pass the test. This is commonly\nuseful for chomping whitespace or variable names:\n\n    whitespace : Parser ()\n    whitespace =\n      chompWhile (\\c -> c == ' ' || c == '\\t' || c == '\\n' || c == '\\r')\n\n    elmVar : Parser String\n    elmVar =\n      getChompedString <|\n        succeed ()\n          |. chompIf Char.isLower\n          |. chompWhile (\\c -> Char.isAlphaNum c || c == '_')\n\n**Note:** a `chompWhile` parser always succeeds! This can lead to tricky\nsituations, especially if you define your whitespace with it. In that case,\nyou could accidentally interpret `letx` as the keyword `let` followed by\n\"spaces\" followed by the variable `x`. This is why the `keyword` and `number`\nparsers peek ahead, making sure they are not followed by anything unexpected.\n","type":"(Char.Char -> Basics.Bool) -> Parser.Parser ()"},{"name":"commit","comment":" `commit` is almost always paired with `backtrackable` in some way, and it\nis tricky to use well.\n\nRead [this document](TODO) to learn how `oneOf`, `backtrackable`, and `commit`\nwork and interact with each other. It is subtle and important!\n","type":"a -> Parser.Parser a"},{"name":"deadEndsToString","comment":" Turn all the `DeadEnd` data into a string that is easier for people to\nread.\n\n**Note:** This is just a baseline of quality. It cannot do anything with colors.\nIt is not interactivite. It just turns the raw data into strings. I really hope\nfolks will check out the source code for some inspiration on how to turn errors\ninto `Html` with nice colors and interaction! The `Parser.Advanced` module lets\nyou work with context as well, which really unlocks another level of quality!\nThe \"context\" technique is how the Elm compiler can say \"I think I am parsing a\nlist, so I was expecting a closing `]` here.\" Telling users what the parser\n_thinks_ is happening can be really helpful!\n","type":"List.List Parser.DeadEnd -> String.String"},{"name":"end","comment":" Check if you have reached the end of the string you are parsing.\n\n    justAnInt : Parser Int\n    justAnInt =\n      succeed identity\n        |= int\n        |. end\n\n    -- run justAnInt \"90210\" == Ok 90210\n    -- run justAnInt \"1 + 2\" == Err ...\n    -- run int       \"1 + 2\" == Ok 1\n\nParsers can succeed without parsing the whole string. Ending your parser\nwith `end` guarantees that you have successfully parsed the whole string.\n","type":"Parser.Parser ()"},{"name":"float","comment":" Parse floats.\n\n    run float \"123\"       == Ok 123\n    run float \"3.1415\"    == Ok 3.1415\n    run float \"0.1234\"    == Ok 0.1234\n    run float \".1234\"     == Ok 0.1234\n    run float \"1e-42\"     == Ok 1e-42\n    run float \"6.022e23\"  == Ok 6.022e23\n    run float \"6.022E23\"  == Ok 6.022e23\n    run float \"6.022e+23\" == Ok 6.022e23\n\nTODO what about trailing stuff?\n\nIf you want to disable literals like `.123` (like in Elm) you could write\nsomething like this:\n\n    elmFloat : Parser Float\n    elmFloat =\n      oneOf\n        [ symbol \".\"\n            |. problem \"floating point numbers must start with a digit, like 0.25\"\n        , float\n        ]\n\n**Note:** If you want a parser for both `Int` and `Float` literals, check out\n[`number`](#number) below. It will be faster than using `oneOf` to combining\n`int` and `float` yourself.\n","type":"Parser.Parser Basics.Float"},{"name":"getChompedString","comment":" Sometimes parsers like `int` or `variable` cannot do exactly what you\nneed. The \"chomping\" family of functions is meant for that case! Maybe you\nneed to parse [valid PHP variables][php] like `$x` and `$txt`:\n\n    php : Parser String\n    php =\n      getChompedString <|\n        succeed ()\n          |. chompIf (\\c -> c == '$')\n          |. chompIf (\\c -> Char.isAlpha c || c == '_')\n          |. chompWhile (\\c -> Char.isAlphaNum c || c == '_')\n\nThe idea is that you create a bunch of chompers that validate the underlying\ncharacters. Then `getChompedString` extracts the underlying `String` efficiently.\n\n**Note:** Maybe it is helpful to see how you can use [`getOffset`](#getOffset)\nand [`getSource`](#getSource) to implement this function:\n\n    getChompedString : Parser a -> Parser String\n    getChompedString parser =\n      succeed String.slice\n        |= getOffset\n        |. parser\n        |= getOffset\n        |= getSource\n\n[php]: https://www.w3schools.com/php/php_variables.asp\n","type":"Parser.Parser a -> Parser.Parser String.String"},{"name":"getCol","comment":" This is a more efficient version of `map Tuple.second getPosition`. This\ncan be useful in combination with [`withIndent`](#withIndent) and\n[`getIndent`](#getIndent), like this:\n\n    checkIndent : Parser ()\n    checkIndent =\n      succeed (\\indent column -> indent <= column)\n        |= getIndent\n        |= getCol\n        |> andThen checkIndentHelp\n\n    checkIndentHelp : Bool -> Parser ()\n    checkIndentHelp isIndented =\n      if isIndented then\n        succeed ()\n      else\n        problem \"expecting more spaces\"\n\nSo the `checkIndent` parser only succeeds when you are \"deeper\" than the\ncurrent indent level. You could use this to parse Elm-style `let` expressions\nlike in [this example](TODO/examples/Let.elm).\n","type":"Parser.Parser Basics.Int"},{"name":"getIndent","comment":" When someone said `withIndent` earlier, what number did they put in there?\n\n- `getIndent` results in `0`, the default value\n- `withIndent 4 getIndent` results in `4`\n\nSo you are just asking about things you said earlier. These numbers do not leak\nout of `withIndent`, so say we have:\n\n    succeed Tuple.pair\n      |= withIndent 4 getIndent\n      |= getIndent\n\nAssuming there are no `withIndent` above this, you would get `(4,0)` from this.\n\nCheck out [`examples/Elm.elm`](TODO) for an example that uses this in a more\nrealistic way.\n","type":"Parser.Parser Basics.Int"},{"name":"getOffset","comment":" Editors think of code as a grid, but behind the scenes it is just a flat\narray of UTF-16 characters. `getOffset` tells you your index in that flat\narray. So if you chomp `\"\\n\\n\\n\\n\"` you are on row 5, column 1, and offset 4.\n\n**Note:** JavaScript uses a somewhat odd version of UTF-16 strings, so a single\ncharacter may take two slots. So in JavaScript, `'abc'.length === 3` but\n`'ðŸ™ˆðŸ™‰ðŸ™Š'.length === 6`. Try it out! And since Elm runs in JavaScript, the offset\nmoves by those rules.\n","type":"Parser.Parser Basics.Int"},{"name":"getPosition","comment":" Code editors treat code like a grid, with rows and columns. The start is\n`row=1` and `col=1`. As you chomp characters, the `col` increments. When you\nrun into a `\\n` character, the `row` increments and `col` goes back to `1`.\n\nIn the Elm compiler, I track the start and end position of every expression\nlike this:\n\n    type alias Located a =\n      { start : (Int, Int)\n      , value : a\n      , end : (Int, Int)\n      }\n\n    located : Parser a -> Parser (Located a)\n    located parser =\n      succeed Located\n        |= getPosition\n        |= parser\n        |= getPosition\n\nSo if there is a problem during type inference, I use this saved position\ninformation to underline the exact problem!\n\n**Note:** Tabs count as one character, so if you are parsing something like\nPython, I recommend sorting that out *after* parsing. So if I wanted the `^^^^`\nunderline like in Elm, I would find the `row` in the source code and do\nsomething like this:\n\n    makeUnderline : String -> Int -> Int -> String\n    makeUnderline row minCol maxCol =\n      String.toList row\n        |> List.indexedMap (toUnderlineChar minCol maxCol)\n        |> String.fromList\n\n    toUnderlineChar : Int -> Int -> Int -> Char -> Char\n    toUnderlineChar minCol maxCol col char =\n      if minCol <= col && col <= maxCol then\n        '^'\n      else if char == '\\t' then\n        '\\t'\n      else\n        ' '\n\nSo it would preserve any tabs from the source line. There are tons of other\nways to do this though. The point is just that you handle the tabs after\nparsing but before anyone looks at the numbers in a context where tabs may\nequal 2, 4, or 8.\n","type":"Parser.Parser ( Basics.Int, Basics.Int )"},{"name":"getRow","comment":" This is a more efficient version of `map Tuple.first getPosition`. Maybe\nyou just want to track the line number for some reason? This lets you do that.\n\nSee [`getPosition`](#getPosition) for an explanation of rows and columns.\n","type":"Parser.Parser Basics.Int"},{"name":"getSource","comment":" Get the full string that is being parsed. You could use this to define\n`getChompedString` or `mapChompedString` if you wanted:\n\n    getChompedString : Parser a -> Parser String\n    getChompedString parser =\n      succeed String.slice\n        |= getOffset\n        |. parser\n        |= getOffset\n        |= getSource\n","type":"Parser.Parser String.String"},{"name":"int","comment":" Parse integers.\n\n    run int \"1\"    == Ok 1\n    run int \"1234\" == Ok 1234\n\n    run int \"-789\" == Err ...\n    run int \"0123\" == Err ...\n    run int \"1.34\" == Err ...\n    run int \"1e31\" == Err ...\n    run int \"123a\" == Err ...\n    run int \"0x1A\" == Err ...\n\nIf you want to handle a leading `+` or `-` you should do it with a custom\nparser like this:\n\n    myInt : Parser Int\n    myInt =\n      oneOf\n        [ succeed negate\n            |. symbol \"-\"\n            |= int\n        , int\n        ]\n\n**Note:** If you want a parser for both `Int` and `Float` literals, check out\n[`number`](#number) below. It will be faster than using `oneOf` to combining\n`int` and `float` yourself.\n","type":"Parser.Parser Basics.Int"},{"name":"keyword","comment":" Parse keywords like `let`, `case`, and `type`.\n\n    run (keyword \"let\") \"let\"     == Ok ()\n    run (keyword \"let\") \"var\"     == Err ... (ExpectingKeyword \"let\") ...\n    run (keyword \"let\") \"letters\" == Err ... (ExpectingKeyword \"let\") ...\n\n**Note:** Notice the third case there! `keyword` actually looks ahead one\ncharacter to make sure it is not a letter, number, or underscore. The goal is\nto help with parsers like this:\n\n    succeed identity\n      |. keyword \"let\"\n      |. spaces\n      |= elmVar\n      |. spaces\n      |. symbol \"=\"\n\nThe trouble is that `spaces` may chomp zero characters (to handle expressions\nlike `[1,2]` and `[ 1 , 2 ]`) and in this case, it would mean `letters` could\nbe parsed as `let ters` and then wonder where the equals sign is! Check out the\n[`token`](#token) docs if you need to customize this!\n","type":"String.String -> Parser.Parser ()"},{"name":"lazy","comment":" Helper to define recursive parsers. Say we want a parser for simple\nboolean expressions:\n\n    true\n    false\n    (true || false)\n    (true || (true || false))\n\nNotice that a boolean expression might contain *other* boolean expressions.\nThat means we will want to define our parser in terms of itself:\n\n    type Boolean\n      = MyTrue\n      | MyFalse\n      | MyOr Boolean Boolean\n\n    boolean : Parser Boolean\n    boolean =\n      oneOf\n        [ succeed MyTrue\n            |. keyword \"true\"\n        , succeed MyFalse\n            |. keyword \"false\"\n        , succeed MyOr\n            |. symbol \"(\"\n            |. spaces\n            |= lazy (\\_ -> boolean)\n            |. spaces\n            |. symbol \"||\"\n            |. spaces\n            |= lazy (\\_ -> boolean)\n            |. spaces\n            |. symbol \")\"\n        ]\n\n**Notice that `boolean` uses `boolean` in its definition!** In Elm, you can\nonly define a value in terms of itself it is behind a function call. So\n`lazy` helps us define these self-referential parsers. (`andThen` can be used\nfor this as well!)\n","type":"(() -> Parser.Parser a) -> Parser.Parser a"},{"name":"lineComment","comment":" Parse single-line comments:\n\n    elm : Parser ()\n    elm =\n      lineComment \"--\"\n\n    js : Parser ()\n    js =\n      lineComment \"//\"\n\n    python : Parser ()\n    python =\n      lineComment \"#\"\n\nThis parser is defined like this:\n\n    lineComment : String -> Parser ()\n    lineComment str =\n      symbol str\n        |. chompUntilEndOr \"\\n\"\n\nSo it will consume the remainder of the line. If the file ends before you see\na newline, that is fine too.\n","type":"String.String -> Parser.Parser ()"},{"name":"loop","comment":" A parser that can loop indefinitely. This can be helpful when parsing\nrepeated structures, like a bunch of statements:\n\n    statements : Parser (List Stmt)\n    statements =\n      loop [] statementsHelp\n\n    statementsHelp : List Stmt -> Parser (Step (List Stmt) (List Stmt))\n    statementsHelp revStmts =\n      oneOf\n        [ succeed (\\stmt -> Loop (stmt :: revStmts))\n            |= statement\n            |. spaces\n            |. symbol \";\"\n            |. spaces\n        , succeed ()\n            |> map (\\_ -> Done (List.reverse revStmts))\n        ]\n\n    -- statement : Parser Stmt\n\nNotice that the statements are tracked in reverse as we `Loop`, and we reorder\nthem only once we are `Done`. This is a very common pattern with `loop`!\n\nCheck out [`examples/String.elm`](TODO) for another example.\n\n**IMPORTANT NOTE:** Parsers like `succeed ()` and `chompWhile Char.isAlpha` can\nsucceed without consuming any characters. So in some cases you may want to use\n[`getOffset`](#getOffset) to ensure that each step actually consumed characters.\nOtherwise you could end up in an infinite loop!\n\n**Note:** Anything you can write with `loop`, you can also write as a parser\nthat chomps some characters `andThen` calls itself with new arguments. The\nproblem with calling `andThen` recursively is that it grows the stack, so you\ncannot do it indefinitely. So `loop` is important because enables tail-call\nelimination, allowing you to parse however many repeats you want.\n","type":"state -> (state -> Parser.Parser (Parser.Step state a)) -> Parser.Parser a"},{"name":"map","comment":" Transform the result of a parser. Maybe you have a value that is\nan integer or `null`:\n\n    nullOrInt : Parser (Maybe Int)\n    nullOrInt =\n      oneOf\n        [ map Just int\n        , map (\\_ -> Nothing) (keyword \"null\")\n        ]\n\n    -- run nullOrInt \"0\"    == Ok (Just 0)\n    -- run nullOrInt \"13\"   == Ok (Just 13)\n    -- run nullOrInt \"null\" == Ok Nothing\n    -- run nullOrInt \"zero\" == Err ...\n","type":"(a -> b) -> Parser.Parser a -> Parser.Parser b"},{"name":"mapChompedString","comment":" This works just like [`getChompedString`](#getChompedString) but gives\na bit more flexibility. For example, maybe you want to parse Elm doc comments\nand get (1) the full comment and (2) all of the names listed in the docs.\n\nYou could implement `mapChompedString` like this:\n\n    mapChompedString : (String -> a -> b) -> Parser a -> Parser String\n    mapChompedString func parser =\n      succeed (\\start value end src -> func (String.slice start end src) value)\n        |= getOffset\n        |= parser\n        |= getOffset\n        |= getSource\n\n","type":"(String.String -> a -> b) -> Parser.Parser a -> Parser.Parser b"},{"name":"multiComment","comment":" Parse multi-line comments. So if you wanted to parse Elm whitespace or\nJS whitespace, you could say:\n\n    elm : Parser ()\n    elm =\n      loop 0 <| ifProgress <|\n        oneOf\n          [ lineComment \"--\"\n          , multiComment \"{-\" \"-}\" Nestable\n          , spaces\n          ]\n\n    js : Parser ()\n    js =\n      loop 0 <| ifProgress <|\n        oneOf\n          [ lineComment \"//\"\n          , multiComment \"/*\" \"*/\" NotNestable\n          , chompWhile (\\c -> c == ' ' || c == '\\n' || c == '\\r' || c == '\\t')\n          ]\n\n    ifProgress : Parser a -> Int -> Parser (Step Int ())\n    ifProgress parser offset =\n      succeed identity\n        |. parser\n        |= getOffset\n        |> andThen (\\newOffset -> if offset == newOffset then Done () else Loop newOffset)\n\n**Note:** The fact that `spaces` comes last in the definition of `elm` is very\nimportant! It can succeed without consuming any characters, so if it were the\nfirst option, it would always succeed and bypass the others! (Same is true of\n`chompWhile` in `js`.) This possibility of success without consumption is also\nwhy wee need the `ifProgress` helper. It detects if there is no more whitespace\nto consume.\n","type":"String.String -> String.String -> Parser.Nestable -> Parser.Parser ()"},{"name":"number","comment":" Parse a bunch of different kinds of numbers without backtracking. A parser\nfor Elm would need to handle integers, floats, and hexidecimal like this:\n\n    type Expr\n      = Variable String\n      | Int Int\n      | Float Float\n      | Apply Expr Expr\n\n    elmNumber : Parser Expr\n    elmNumber =\n      number\n        { int = Just Int\n        , hex = Just Int    -- 0x001A is allowed\n        , octal = Nothing   -- 0o0731 is not\n        , binary = Nothing  -- 0b1101 is not\n        , float = Just Float\n        }\n\nIf you wanted to implement the [`float`](#float) parser, it would be like this:\n\n    float : Parser Float\n    float =\n      number\n        { int = Just toFloat\n        , hex = Nothing\n        , octal = Nothing\n        , binary = Nothing\n        , float = Just identity\n        }\n\nNotice that it actually is processing `int` results! This is because `123`\nlooks like an integer to me, but maybe it looks like a float to you. If you had\n`int = Nothing`, floats would need a decimal like `1.0` in every case. If you\nlike explicitness, that may actually be preferable!\n","type":"{ int : Maybe.Maybe (Basics.Int -> a), hex : Maybe.Maybe (Basics.Int -> a), octal : Maybe.Maybe (Basics.Int -> a), binary : Maybe.Maybe (Basics.Int -> a), float : Maybe.Maybe (Basics.Float -> a) } -> Parser.Parser a"},{"name":"oneOf","comment":" If you are parsing JSON, the values can be strings, floats, booleans,\narrays, objects, or null. You need a way to pick `oneOf` them! Here is a\nsample of what that code might look like:\n\n    type Json\n      = Number Float\n      | Boolean Bool\n      | Null\n\n    json : Parser Json\n    json =\n      oneOf\n        [ map Number float\n        , map (\\_ -> Boolean True) (keyword \"true\")\n        , map (\\_ -> Boolean False) (keyword \"false\")\n        , map (\\_ -> Null) keyword \"null\"\n        ]\n\nThis parser will keep trying parsers until `oneOf` them starts chomping\ncharacters. Once a path is chosen, it does not come back and try the others.\n\n**Note:** I highly recommend reading [this document](TODO) to learn how\n`oneOf` and `backtrackable` interact. It is subtle and important!\n","type":"List.List (Parser.Parser a) -> Parser.Parser a"},{"name":"problem","comment":" Indicate that a parser has reached a dead end. \"Everything was going fine\nuntil I ran into this problem.\" Check out the [`andThen`](#andThen) docs to see\nan example usage.\n","type":"String.String -> Parser.Parser a"},{"name":"run","comment":" Try a parser. Here are some examples using the [`keyword`](#keyword)\nparser:\n\n    run (keyword \"true\") \"true\"  == Ok ()\n    run (keyword \"true\") \"True\"  == Err ...\n    run (keyword \"true\") \"false\" == Err ...\n    run (keyword \"true\") \"true!\" == Ok ()\n\nNotice the last case! A `Parser` will chomp as much as possible and not worry\nabout the rest. Use the [`end`](#end) parser to ensure you made it to the end\nof the string!\n","type":"Parser.Parser a -> String.String -> Result.Result (List.List Parser.DeadEnd) a"},{"name":"sequence","comment":" Handle things like lists and records, but you can customize the details\nhowever you need. Say you want to parse C-style code blocks:\n\n    import Parser exposing (Parser)\n    import Parser.LanguageKit as Parser exposing (Trailing(..))\n\n    block : Parser (List Stmt)\n    block =\n      Parser.sequence\n        { start = \"{\"\n        , separator = \";\"\n        , end = \"}\"\n        , spaces = spaces\n        , item = statement\n        , trailing = Mandatory -- demand a trailing semi-colon\n        }\n\n    -- statement : Parser Stmt\n\n**Note:** If you need something more custom, do not be afraid to check\nout the implementation and customize it for your case. It is better to\nget nice error messages with a lower-level implementation than to try\nto hack high-level parsers to do things they are not made for.\n","type":"{ start : String.String, separator : String.String, end : String.String, spaces : Parser.Parser (), item : Parser.Parser a, trailing : Parser.Trailing } -> Parser.Parser (List.List a)"},{"name":"spaces","comment":" Parse zero or more `' '`, `'\\n'`, and `'\\r'` characters.\n\nThe implementation is pretty simple:\n\n    spaces : Parser ()\n    spaces =\n      chompWhile (\\c -> c == ' ' || c == '\\n' || c == '\\r')\n\nSo if you need something different (like tabs) just define an alternative with\nthe necessary tweaks! Check out [`lineComment`](#lineComment) and\n[`multiComment`](#multiComment) for more complex situations.\n","type":"Parser.Parser ()"},{"name":"succeed","comment":" A parser that succeeds without chomping any characters.\n\n    run (succeed 90210  ) \"mississippi\" == Ok 90210\n    run (succeed 3.141  ) \"mississippi\" == Ok 3.141\n    run (succeed ()     ) \"mississippi\" == Ok ()\n    run (succeed Nothing) \"mississippi\" == Ok Nothing\n\nSeems weird on its own, but it is very useful in combination with other\nfunctions. The docs for [`(|=)`](#|=) and [`andThen`](#andThen) have some neat\nexamples.\n","type":"a -> Parser.Parser a"},{"name":"symbol","comment":" Parse symbols like `(` and `,`.\n\n    run (symbol \"[\") \"[\" == Ok ()\n    run (symbol \"[\") \"4\" == Err ... (ExpectingSymbol \"[\") ...\n\n**Note:** This is good for stuff like brackets and semicolons, but it probably\nshould not be used for binary operators like `+` and `-` because you can find\nyourself in weird situations. For example, is `3--4` a typo? Or is it `3 - -4`?\nI have had better luck with `chompWhile isSymbol` and sorting out which\noperator it is afterwards.\n","type":"String.String -> Parser.Parser ()"},{"name":"token","comment":" Parse exactly the given string, without any regard to what comes next.\n\nA potential pitfall when parsing keywords is getting tricked by variables that\nstart with a keyword, like `let` in `letters` or `import` in `important`. This\nis especially likely if you have a whitespace parser that can consume zero\ncharcters. So the [`keyword`](#keyword) parser is defined with `token` and a\ntrick to peek ahead a bit:\n\n    keyword : String -> Parser ()\n    keyword kwd =\n      succeed identity\n        |. backtrackable (token kwd)\n        |= oneOf\n            [ map (\\_ -> True) (backtrackable (chompIf isVarChar))\n            , succeed False\n            ]\n        |> andThen (checkEnding kwd)\n\n    checkEnding : String -> Bool -> Parser ()\n    checkEnding kwd isBadEnding =\n      if isBadEnding then\n        problem (\"expecting the `\" ++ kwd ++ \"` keyword\")\n      else\n        commit ()\n\n    isVarChar : Char -> Bool\n    isVarChar char =\n      Char.isAlphaNum char || char == '_'\n\nThis definition is specially designed so that (1) if you really see `let` you\ncommit to that path and (2) if you see `letters` instead you can backtrack and\ntry other options. If I had just put a `backtrackable` around the whole thing\nyou would not get (1) anymore.\n","type":"String.String -> Parser.Parser ()"},{"name":"variable","comment":" Create a parser for variables. If we wanted to parse type variables in Elm,\nwe could try something like this:\n\n    import Char\n    import Parser exposing (..)\n    import Set\n\n    typeVar : Parser String\n    typeVar =\n      variable\n        { start = Char.isLower\n        , inner = \\c -> Char.isAlphaNum c || c == '_'\n        , reserved = Set.fromList [ \"let\", \"in\", \"case\", \"of\" ]\n        }\n\nThis is saying it _must_ start with a lower-case character. After that,\ncharacters can be letters, numbers, or underscores. It is also saying that if\nyou run into any of these reserved names, it is definitely not a variable.\n","type":"{ start : Char.Char -> Basics.Bool, inner : Char.Char -> Basics.Bool, reserved : Set.Set String.String } -> Parser.Parser String.String"},{"name":"withIndent","comment":" Some languages are indentation sensitive. Python cares about tabs. Elm\ncares about spaces sometimes. `withIndent` and `getIndent` allow you to manage\n\"indentation state\" yourself, however is necessary in your scenario.\n\nCheck out [`examples/Elm.elm`](TODO) for an example that uses this in a more\nrealistic way.\n","type":"Basics.Int -> Parser.Parser a -> Parser.Parser a"}],"binops":[{"name":"|.","comment":" **Skip** values in a parser pipeline. For example, maybe we want to parse\nsome JavaScript variables:\n\n    var : Parser String\n    var =\n      getChompedString <|\n        succeed ()\n          |. chompIf isStartChar\n          |. chompWhile isInnerChar\n\n    isStartChar : Char -> Bool\n    isStartChar char =\n      Char.isAlpha char || char == '_' || char == '$'\n\n    isInnerChar : Char -> Bool\n    isInnerChar char =\n      isStartChar char || Char.isDigit char\n\n`chompIf isStartChar` can chomp one character and produce a `()` value.\n`chompWhile isInnerChar` can chomp zero or more characters and produce a `()`\nvalue. The `(|.)` operators are saying to still chomp all the characters, but\nskip the two `()` values that get produced. No one cares about them.\n","type":"Parser.Parser keep -> Parser.Parser ignore -> Parser.Parser keep","associativity":"left","precedence":6},{"name":"|=","comment":" **Keep** values in a parser pipeline. For example, we could say:\n\n    type alias Point = { x : Float, y : Float }\n\n    point : Parser Point\n    point =\n      succeed Point\n        |. symbol \"(\"\n        |. spaces\n        |= float\n        |. spaces\n        |. symbol \",\"\n        |. spaces\n        |= float\n        |. spaces\n        |. symbol \")\"\n\nAll the parsers in this pipeline will chomp characters and produce values. So\n`symbol \"(\"` will chomp one paren and produce a `()` value. Similarly, `float`\nwill chomp some digits and produce a `Float` value. The `(|.)` and `(|=)`\noperators just decide whether we give the values to the `Point` function.\n\nSo in this case, we skip the `()` from `symbol \"(\"`, we skip the `()` from\n`spaces`, we keep the `Float` from `float`, etc.\n","type":"Parser.Parser (a -> b) -> Parser.Parser a -> Parser.Parser b","associativity":"left","precedence":5}]}]